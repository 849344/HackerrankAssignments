import java.io.*;
import java.math.*;
import java.text.*;
import java.util.*;
import java.util.regex.*;

public class Solution {

    /*
     * Complete the cookies function below.
     */
    static int cookies(int k, int[] A) {
        /*
         * Write your code here.
         */
         int size=A.length;
         PriorityQueue<Integer> hash=new  PriorityQueue<Integer>();
         for(int a:A){
             hash.add(a);
         }
         int ct=0;
         int a,b,new_element;
         while(hash.peek() <= k-1 && hash.size()>1 ){
             //take the first 2 elements and update their value
            a=hash.poll(); //first    //removed the first
            b=hash.poll();
            new_element=(a*1) + (b*2);
           // System.out.println(a+" "+b+" "+ new_element);
            hash.add(new_element);
            ++ct;
         }
         if(hash.size()==1 && hash.peek()<= k-1)
         return -1;
         else
        return ct;

    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] nk = scanner.nextLine().split(" ");

        int n = Integer.parseInt(nk[0].trim());

        int k = Integer.parseInt(nk[1].trim());

        int[] A = new int[n];

        String[] AItems = scanner.nextLine().split(" ");

        for (int AItr = 0; AItr < n; AItr++) {
            int AItem = Integer.parseInt(AItems[AItr].trim());
            A[AItr] = AItem;
        }

        int result = cookies(k, A);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedWriter.close();
    }
}
